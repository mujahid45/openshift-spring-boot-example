buildscript {
    repositories {
      mavenCentral()
      // jcenter()
      maven { 
        // bypass jcenter() because openshift supports gradle < 1.6 which has no jcenter()
        url "https://repository.codehaus.org"
        url "https://jcenter.bintray.com"
        // url "http://dl.bintray.com/rtyler/jruby"
        // url "http://dl.bintray.com/jfrog/jfrog-jars"
      }
    }
    dependencies {
        // docker needs groovy: http://stackoverflow.com/questions/23846709/groovy-shorttypehandling-classnotfoundexception
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "org.codehaus.groovy:groovy-all:2.3.6"

        classpath("org.springframework.boot:spring-boot-gradle-plugin:${rootProject["spring.boot.version"]}")
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5"
        classpath "com.lookout:jruby-gradle-plugin:2.1.0"
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'groovy'
    apply plugin: 'spring-boot'
    apply plugin: 'application'
    apply plugin: 'war'
    apply plugin: 'docker'

    repositories {
      // mavenCentral()
      maven { 
        url 'https://jcenter.bintray.com'
      }
    }

    dependencies {
    // groovy group: 'org.codehaus.groovy', name: 'groovy', version: '1.6.5'
    // groovy group: 'org.apache.ivy', name:'ivy', version:'2.2.0'
        apply from: "${rootProject.projectDir}/project/gradle/spring-boot.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/guava.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/joda.gradle"

        apply from: "${rootProject.projectDir}/project/gradle/commons.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/logback.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/logback-gelf.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/slf4j.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/hamcrest.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/junit.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/mockito.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/spring-test.gradle"

        compile fileTree(dir: 'lib', includes: ['*.jar'])
        compile fileTree(dir: 'lib', includes: ['*.war'])
    }

    configurations {
        all*.exclude module: "slf4j-log4j12"
    }

    test {
        testLogging.showStandardStreams = true
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

    tasks.withType(Jar) {
        baseName = "${rootProject.name}-${project.name}"
    }

    tasks.withType(Zip) {
        baseName = "${rootProject.name}-${project.name}"
    }

    group = "jruby"
    version = "1.0"
    project.version = '1.0'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    docker {
      baseImage "jruby/jruby"
      maintainer 'm.maatkamp@gmail.com'
    }

    // https://github.com/gradle/gradle/pull/292
    task wrapper(type: Wrapper) {
      gradleVersion = "2.2-20140906220023+0000"
      
      // gradleVersion = "2.2-20140901220011+0000"
      // gradleVersion = "2.1-rc-3"
      // gradleVersion = "1.7"
    }
}

project("project:modules") {
    dependencies {
        compile project(":project")
        // compile project(":project:services:services-rabbitmq")
        apply from: "${rootProject.projectDir}/project/gradle/cqengine.gradle"
    }
}

project("project:modules:jruby") {
    apply plugin: 'com.lookout.jruby'

    configurations {
        all*.exclude group: "org.hibernate"
        all*.exclude group: "org.hibernate.javax.persistence"
    }
    dependencies {
        compile project(":project:modules")
        apply from: "${rootProject.projectDir}/project/gradle/jruby.gradle"
        apply from: "${rootProject.projectDir}/project/gradle/asciidoctorj.gradle"
    }

    mainClassName = "jruby.JRubyApplicationStarter"
    // applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,address=localhost:7001,server=y,suspend=n"]
    war {
      archiveName = 'ROOT.war'
      destinationDir = file('../../../webapps')
    }

    distDocker {
        exposePort 9126
    }
}

task generaterRaptorDockerBaseImage(type: Docker) {
    baseImage "dockerfile/java"
    applicationName = "jruby"
    // runCommand 'echo "deb http://archive.ubuntu.com/ubuntu precise main universe" > /etc/apt/sources.list'
    runCommand "apt-get update"
    runCommand "apt-get install -y vim openssh-server"
}


defaultTasks "project:modules:jruby:run"
mainClassName = "jruby.JRubyApplicationStarter"

